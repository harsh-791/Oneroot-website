import { useState, useEffect, useRef } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence, useAnimation, useScroll, useTransform } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import { fetchRegionById } from '../services/regionService';
import { formatRelativeTime, formatPrice, formatDate } from '../utils/formatters';
import { 
  FaArrowLeft, FaPercent, FaFilter, FaImage, 
  FaDownload, FaTimes as FaXmark, FaChevronLeft, FaChevronRight, 
  FaPhone, FaShare, FaCalendarAlt, FaHistory, 
  FaMapMarkerAlt, FaInfoCircle, FaRuler as FaWeightScale,
  FaMapMarker as FaLocationDot, FaStar, FaTag, FaLeaf,
  FaChartLine, FaExternalLinkAlt, FaEye
} from 'react-icons/fa';
import { useSwipeable } from 'react-swipeable';

function RegionDetailPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [region, setRegion] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  const [showImageModal, setShowImageModal] = useState(false);
  const [currentPriceIndex, setCurrentPriceIndex] = useState(0);
  const [currentWeightIndex, setCurrentWeightIndex] = useState(0);
  const [isCallModalOpen, setIsCallModalOpen] = useState(false);
  const [isShareModalOpen, setIsShareModalOpen] = useState(false);
  const [copied, setCopied] = useState(false);
  const [activeTab, setActiveTab] = useState('overview');
  const [showFullDescription, setShowFullDescription] = useState(false);
  const [scrollProgress, setScrollProgress] = useState(0);
  
  // Refs for scroll tracking
  const pageRef = useRef(null);
  const headerRef = useRef(null);
  
  // Scroll animation
  const { scrollYProgress } = useScroll({
    target: pageRef,
    offset: ["start start", "end end"]
  });
  
  // Pre-define all transform values to avoid hooks in render
  const yTransform1 = useTransform(scrollYProgress, [0, 1], [0, -50]);
  const xTransform1 = useTransform(scrollYProgress, [0, 1], [0, 30]);
  const yTransform2 = useTransform(scrollYProgress, [0, 1], [0, 80]);
  const xTransform2 = useTransform(scrollYProgress, [0, 1], [0, -40]);
  const yTransform3 = useTransform(scrollYProgress, [0, 1], [0, -60]);
  
  // Animation controls
  const controls = useAnimation();
  const headerControls = useAnimation();
  const galleryControls = useAnimation();
  const priceControls = useAnimation();
  const metricsControls = useAnimation();
  const overviewControls = useAnimation();
  
  // Intersection observers for animations with improved thresholds
  const { ref: overviewInViewRef, inView: overviewInView } = useInView({ threshold: 0.15, triggerOnce: true });
  const { ref: galleryInViewRef, inView: galleryInView } = useInView({ threshold: 0.15, triggerOnce: true });
  const { ref: priceInViewRef, inView: priceInView } = useInView({ threshold: 0.15, triggerOnce: true });
  const { ref: metricsInViewRef, inView: metricsInView } = useInView({ threshold: 0.15, triggerOnce: true });
  
  // Enhanced animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { 
        staggerChildren: 0.08,
        delayChildren: 0.1,
        duration: 0.6,
        ease: "easeOut"
      }
    },
    exit: {
      opacity: 0,
      transition: { duration: 0.4, ease: "easeInOut" }
    }
  };
  
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        duration: 0.5,
        ease: [0.25, 0.1, 0.25, 1.0] // Custom cubic bezier for smooth motion
      }
    }
  };
  
  const cardVariants = {
    hidden: { opacity: 0, y: 30 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        type: "spring",
        stiffness: 120,
        damping: 14
      }
    },
    hover: {
      y: -8,
      scale: 1.02,
      boxShadow: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
      transition: {
        type: "spring",
        stiffness: 400,
        damping: 10
      }
    }
  };
  
  const staggerContainerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.12,
        delayChildren: 0.05
      }
    }
  };
  
  const fadeInUpVariants = {
    hidden: { opacity: 0, y: 40 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        stiffness: 150,
        damping: 20,
        mass: 0.8
      }
    }
  };
  
  const scaleInVariants = {
    hidden: { opacity: 0, scale: 0.85 },
    visible: {
      opacity: 1,
      scale: 1,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 20
      }
    }
  };

  // Track scroll progress for parallax effects
  useEffect(() => {
    const unsubscribe = scrollYProgress.onChange(value => {
      setScrollProgress(value);
    });
    return () => unsubscribe();
  }, [scrollYProgress]);

  // Start animations when sections come into view
  useEffect(() => {
    // Only start section animations if we have region data
    if (region) {
      if (overviewInView) {
        try {
          overviewControls.start('visible');
        } catch (err) {
          console.error('Overview animation error:', err);
        }
      }
      
      if (galleryInView) {
        try {
          galleryControls.start('visible');
        } catch (err) {
          console.error('Gallery animation error:', err);
        }
      }
      
      if (priceInView) {
        try {
          priceControls.start('visible');
        } catch (err) {
          console.error('Price animation error:', err);
        }
      }
      
      if (metricsInView) {
        try {
          metricsControls.start('visible');
        } catch (err) {
          console.error('Metrics animation error:', err);
        }
      }
    }
  }, [overviewInView, galleryInView, priceInView, metricsInView, 
      overviewControls, galleryControls, priceControls, metricsControls, region]);

  // Initialize animations
  useEffect(() => {
    // Reset animations when component mounts
    controls.set('hidden');
    headerControls.set('hidden');
    overviewControls.set('hidden');
    galleryControls.set('hidden');
    priceControls.set('hidden');
    metricsControls.set('hidden');
  }, [controls, headerControls, overviewControls, galleryControls, priceControls, metricsControls]);

  // Fetch region data
  useEffect(() => {
    const getRegion = async () => {
      try {
        setLoading(true);
        console.log(`Fetching region with ID: ${id}`);
        
        const { data, error } = await fetchRegionById(id);
        
        if (error) {
          console.error('Error fetching region:', error);
          setLoading(false);
          return;
        }
        
        if (!data) {
          console.warn(`No data found for region with ID: ${id}`);
          setLoading(false);
          return;
        }
        
        console.log('Region data fetched successfully:', data);
        setRegion(data);
        
        // Set initial selected image if media exists
        if (data.media && data.media.length > 0) {
          setSelectedImageIndex(0);
        }
        
        // Set initial price and weight indices
        if (data.singlefilter_price) setCurrentPriceIndex(0);
        else if (data.doublefilter_price) setCurrentPriceIndex(1);
        else if (data.mixedfilter_price) setCurrentPriceIndex(2);
        
        if (data.avg_weight_per_singlefilter) setCurrentWeightIndex(0);
        else if (data.avg_weight_per_doublefilter) setCurrentWeightIndex(1);
        else if (data.avg_weight_per_mixedfilter) setCurrentWeightIndex(2);
        
        // Trigger animations after data is loaded
        controls.start("visible");
        headerControls.start("visible");
        
        // Add a small delay before showing content for smoother transition
        setTimeout(() => {
          setLoading(false);
        }, 500);
      } catch (error) {
        console.error('Unexpected error fetching region:', error);
        setLoading(false);
      }
    };
    
    if (id) {
      getRegion();
    } else {
      console.error('No region ID provided');
      setLoading(false);
    }
    
    // Cleanup function
    return () => {
      // Reset state when component unmounts or ID changes
      setRegion(null);
      setSelectedImageIndex(0);
      setCurrentPriceIndex(0);
      setCurrentWeightIndex(0);
      setShowImageModal(false);
      setActiveTab('overview');
    };
  }, [id, controls, headerControls]);
  
  // Start animations after data is loaded with improved sequence
  useEffect(() => {
    if (!loading && region) {
      // Use a small timeout to ensure DOM is ready
      const timer = setTimeout(() => {
        try {
          // First animate the header
          headerControls.start('visible')
            .then(() => {
              // Then start the main container animation
              return controls.start('visible');
            })
            .then(() => {
              // After main animation starts, trigger section animations if they're in view
              if (overviewInView) overviewControls.start('visible');
              if (galleryInView) galleryControls.start('visible');
              if (priceInView) priceControls.start('visible');
              if (metricsInView) metricsControls.start('visible');
            });
        } catch (err) {
          console.error('Animation sequence error:', err);
        }
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [
    loading, region, controls, headerControls, overviewControls, 
    galleryControls, priceControls, metricsControls, 
    overviewInView, galleryInView, priceInView, metricsInView
  ]);

  useEffect(() => {
    if (!region) return;

    // Rotate through prices
    const prices = [
      { label: 'Single Filter Price', value: region.singlefilter_price },
      { label: 'Double Filter Price', value: region.doublefilter_price },
      { label: 'Mixed Filter Price', value: region.mixedfilter_price },
    ].filter(item => item.value && parseFloat(item.value) > 0);

    if (prices.length > 1) {
      const priceInterval = setInterval(() => {
        setCurrentPriceIndex(prev => (prev + 1) % prices.length);
      }, 3000);
      return () => clearInterval(priceInterval);
    }
  }, [region]);

  useEffect(() => {
    if (!region) return;

    // Rotate through weights
    const weights = [
      { label: 'Single Filter Weight', value: region.avg_weight_per_singlefilter },
      { label: 'Double Filter Weight', value: region.avg_weight_per_doublefilter },
      { label: 'Mixed Filter Weight', value: region.avg_weight_per_mixedfilter },
    ].filter(item => item.value);

    if (weights.length > 1) {
      const weightInterval = setInterval(() => {
        setCurrentWeightIndex(prev => (prev + 1) % weights.length);
      }, 3000);
      return () => clearInterval(weightInterval);
    }
  }, [region]);

  // Enhanced image navigation with haptic feedback simulation
  const nextImage = (e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    if (region?.media && region.media.length > 1) {
      // Add subtle animation for transition
      setSelectedImageIndex((prev) => (prev + 1) % region.media.length);
      
      // Simulate haptic feedback on mobile with vibration API if available
      if (window.navigator && window.navigator.vibrate) {
        try {
          window.navigator.vibrate(5); // Very subtle vibration
        } catch (err) {
          // Ignore vibration errors
        }
      }
    }
  };

  const prevImage = (e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    if (region?.media && region.media.length > 1) {
      setSelectedImageIndex((prev) => (prev === 0 ? region.media.length - 1 : prev - 1));
      
      // Simulate haptic feedback on mobile
      if (window.navigator && window.navigator.vibrate) {
        try {
          window.navigator.vibrate(5);
        } catch (err) {
          // Ignore vibration errors
        }
      }
    }
  };
  
  // Improved swipe handlers for mobile with better sensitivity
  const swipeHandlers = useSwipeable({
    onSwipedLeft: nextImage,
    onSwipedRight: prevImage,
    preventDefaultTouchmoveEvent: true,
    trackMouse: false,
    trackTouch: true,
    delta: 10, // Minimum swipe distance
    swipeDuration: 500, // Maximum time for swipe motion
    touchEventOptions: { passive: true }
  });
  
  // Handle call button click with animation
  const handleCallClick = () => {
    setIsCallModalOpen(true);
  };
  
  // Handle share button click with animation
  const handleShareClick = () => {
    setIsShareModalOpen(true);
  };
  
  // Enhanced copy link to clipboard with feedback
  const copyToClipboard = () => {
    navigator.clipboard.writeText(window.location.href)
      .then(() => {
        setCopied(true);
        
        // Vibration feedback if available
        if (window.navigator && window.navigator.vibrate) {
          try {
            window.navigator.vibrate([15, 30, 15]); // Pattern: vibrate, pause, vibrate
          } catch (err) {
            // Ignore vibration errors
          }
        }
        
        setTimeout(() => setCopied(false), 2000);
      })
      .catch(err => {
        console.error('Failed to copy: ', err);
      });
  };
  
  // Toggle description expansion
  const toggleDescription = () => {
    setShowFullDescription(prev => !prev);
  };
  
  // Handle URL hash for tab navigation
  useEffect(() => {
    // Function to update active tab based on URL hash
    const updateTabFromHash = () => {
      const hash = window.location.hash.replace('#', '');
      if (hash && ['overview', 'gallery', 'prices', 'metrics'].includes(hash)) {
        setActiveTab(hash);
      }
    };
    
    // Update tab on initial load
    updateTabFromHash();
    
    // Listen for hash changes
    window.addEventListener('hashchange', updateTabFromHash);
    
    // Cleanup
    return () => {
      window.removeEventListener('hashchange', updateTabFromHash);
    };
  }, []);
  
  // Enhanced tab switching with smooth scrolling and URL hash update
  const switchTab = (tab) => {
    setActiveTab(tab);
    
    // Update URL hash without triggering a scroll
    window.history.pushState(null, '', `#${tab}`);
    
    // Scroll to the appropriate section with offset for sticky header
    const element = document.getElementById(tab);
    if (element) {
      const headerHeight = headerRef.current ? headerRef.current.offsetHeight : 0;
      const yOffset = -20 - headerHeight; // Additional 20px buffer
      const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;
      
      window.scrollTo({
        top: y,
        behavior: 'smooth'
      });
    }
  };

  if (loading) {
    return (
      <div className="container-mobile flex justify-center items-center min-h-[80vh] bg-gradient-to-b from-gray-50 to-white">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, ease: "easeOut" }}
          className="flex flex-col items-center"
        >
          {/* Enhanced loading spinner */}
          <div className="relative h-20 w-20 mb-6">
            <motion.div 
              className="absolute inset-0 rounded-full border-t-3 border-primary"
              animate={{ rotate: 360 }}
              transition={{ 
                duration: 1.2, 
                ease: "linear", 
                repeat: Infinity 
              }}
            />
            <motion.div 
              className="absolute inset-0 rounded-full border-2 border-gray-200"
              animate={{ scale: [1, 1.05, 1] }}
              transition={{ 
                duration: 2, 
                ease: "easeInOut", 
                repeat: Infinity 
              }}
            />
            <motion.div 
              className="absolute inset-2 rounded-full bg-primary/10"
              animate={{ opacity: [0.1, 0.3, 0.1] }}
              transition={{ 
                duration: 1.5, 
                ease: "easeInOut", 
                repeat: Infinity 
              }}
            />
          </div>
          
          {/* Loading text with animation */}
          <motion.div
            className="flex flex-col items-center"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.3, duration: 0.5 }}
          >
            <h3 className="text-xl font-semibold text-gray-800 mb-2">Loading Region</h3>
            <p className="text-gray-500 text-center max-w-xs">
              Preparing detailed information about this region...
            </p>
            
            {/* Animated dots */}
            <div className="flex space-x-2 mt-4">
              {[0, 1, 2].map((i) => (
                <motion.div
                  key={i}
                  className="h-2 w-2 rounded-full bg-primary"
                  animate={{ 
                    y: [0, -10, 0],
                    opacity: [0.5, 1, 0.5]
                  }}
                  transition={{ 
                    duration: 1, 
                    repeat: Infinity, 
                    delay: i * 0.2,
                    ease: "easeInOut"
                  }}
                />
              ))}
            </div>
          </motion.div>
        </motion.div>
      </div>
    );
  }

  if (!loading && !region) {
    return (
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="container-mobile py-12 text-center"
      >
        <div className="bg-white rounded-xl shadow-md p-8 max-w-md mx-auto">
          <div className="h-20 w-20 mx-auto mb-6 rounded-full bg-red-100 flex items-center justify-center">
            <FaXmark className="text-red-500 text-3xl" />
          </div>
          <h2 className="text-2xl font-bold mb-4 text-gray-800">Region Not Found</h2>
          <p className="mb-8 text-gray-600">The region you're looking for doesn't exist or has been removed.</p>
          <Link 
            to="/regions" 
            className="bg-primary text-white px-6 py-3 rounded-xl inline-flex items-center justify-center font-medium shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1"
          >
            <FaArrowLeft className="mr-2" />
            Back to Regions
          </Link>
        </div>
      </motion.div>
    );
  }
  
  // Previous code has been removed to fix JSX comment issues

  // Only calculate prices and weights if region exists
  const prices = region ? [
    { label: 'Single Filter Price', value: region.singlefilter_price },
    { label: 'Double Filter Price', value: region.doublefilter_price },
    { label: 'Mixed Filter Price', value: region.mixedfilter_price },
  ].filter(item => item.value && parseFloat(item.value) > 0) : [];

  const weights = region ? [
    { label: 'Single Filter Weight', value: region.avg_weight_per_singlefilter },
    { label: 'Double Filter Weight', value: region.avg_weight_per_doublefilter },
    { label: 'Mixed Filter Weight', value: region.avg_weight_per_mixedfilter },
  ].filter(item => item.value) : [];

  return (
    <motion.div 
      ref={pageRef}
      className="relative min-h-screen pb-24 bg-gradient-to-b from-gray-50 to-white"
      initial="hidden"
      animate={controls}
      exit="exit"
      variants={containerVariants}
    >
      {/* Enhanced Background Effect with Parallax */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <motion.div 
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 0.04, scale: 1 }}
          transition={{ duration: 1.8, ease: "easeOut" }}
          style={{ 
            y: yTransform1,
            x: xTransform1
          }}
          className="absolute -top-40 -right-40 w-[35rem] h-[35rem] bg-primary rounded-full blur-[120px]"
        />
        <motion.div 
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 0.03, scale: 1 }}
          transition={{ duration: 1.8, delay: 0.2, ease: "easeOut" }}
          style={{ 
            y: yTransform2,
            x: xTransform2
          }}
          className="absolute top-1/3 -left-20 w-[30rem] h-[30rem] bg-blue-400 rounded-full blur-[100px]"
        />
        <motion.div 
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 0.03, scale: 1 }}
          transition={{ duration: 1.8, delay: 0.4, ease: "easeOut" }}
          style={{ 
            y: yTransform3
          }}
          className="absolute bottom-20 right-10 w-[25rem] h-[25rem] bg-amber-400 rounded-full blur-[100px]"
        />
      </div>
      
      {/* Sticky Header with Scroll Animation - Improved */}
      <motion.header
        ref={headerRef}
        className="sticky top-0 z-50 backdrop-blur-md transition-all duration-300"
        initial={{ height: 80, backgroundColor: "rgba(255, 255, 255, 0)" }}
        animate={{ 
          height: scrollProgress > 0.05 ? 64 : 80,
          backgroundColor: scrollProgress > 0.05 ? "rgba(255, 255, 255, 0.9)" : "rgba(255, 255, 255, 0)",
          boxShadow: scrollProgress > 0.05 ? "0 4px 20px rgba(0, 0, 0, 0.08)" : "none"
        }}
      >
        <div className="container-mobile h-full flex items-center justify-between">
          <motion.div 
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="flex items-center"
          >
            <Link 
              to="/regions" 
              className="mr-4 text-gray-700 hover:text-primary transition-colors"
            >
              <FaArrowLeft className="text-xl" />
            </Link>
            <div className="flex flex-col">
              <h1 className="text-lg font-bold text-gray-800 truncate max-w-[200px]">
                {region.name}
              </h1>
              <div className="text-xs text-gray-500 flex items-center">
                <FaLocationDot className="mr-1 text-primary" />
                Region Details
              </div>
            </div>
          </motion.div>
          
          <motion.div 
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="flex items-center space-x-3"
          >
            <motion.button
              onClick={handleShareClick}
              className="p-2 rounded-full bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
            >
              <FaShare className="text-lg" />
            </motion.button>
            
            <motion.button
              onClick={handleCallClick}
              className="p-2 rounded-full bg-primary text-white hover:bg-primary-dark transition-colors"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
            >
              <FaPhone className="text-lg" />
            </motion.button>
          </motion.div>
        </div>
      </motion.header>
      
      {/* Desktop Navigation Tabs - New addition */}
      <motion.div 
        className="hidden md:block sticky top-[80px] z-40 bg-white border-b border-gray-200 shadow-sm"
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.3 }}
      >
        <div className="container-mobile">
          <div className="flex space-x-1">
            {[
              { id: 'overview', label: 'Overview', icon: <FaInfoCircle /> },
              { id: 'gallery', label: 'Gallery', icon: <FaImage /> },
              { id: 'prices', label: 'Prices', icon: <FaFilter /> },
              { id: 'metrics', label: 'Metrics', icon: <FaWeightScale /> }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => switchTab(tab.id)}
                className={`flex items-center px-4 py-3 text-sm font-medium transition-colors ${
                  activeTab === tab.id 
                    ? 'text-primary border-b-2 border-primary' 
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                <span className="mr-2">{tab.icon}</span>
                {tab.label}
              </button>
            ))}
          </div>
        </div>
      </motion.div>
      
      {/* Sticky Mobile Navigation - Bottom - Improved */}
      <motion.div 
        className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-xl z-50 py-2 px-4 md:hidden"
        initial={{ y: 100 }}
        animate={{ y: 0 }}
        transition={{ delay: 0.5, type: "spring", stiffness: 300, damping: 30 }}
      >
        <div className="flex justify-around items-center">
          {[
            { id: 'overview', label: 'Overview', icon: <FaInfoCircle /> },
            { id: 'gallery', label: 'Gallery', icon: <FaImage /> },
            { id: 'prices', label: 'Prices', icon: <FaFilter /> },
            { id: 'metrics', label: 'Metrics', icon: <FaWeightScale /> }
          ].map((tab) => (
            <button 
              key={tab.id}
              onClick={() => switchTab(tab.id)}
              className={`flex flex-col items-center px-3 py-2 ${
                activeTab === tab.id ? 'text-primary' : 'text-gray-500'
              }`}
            >
              <span className="text-lg mb-1">{tab.icon}</span>
              <span className="text-xs">{tab.label}</span>
            </button>
          ))}
          <button 
            onClick={handleCallClick}
            className="flex flex-col items-center px-3 py-2 text-green-600"
          >
            <FaPhone className="text-lg mb-1" />
            <span className="text-xs">Call</span>
          </button>
        </div>
      </motion.div>
      
      <div className="container-mobile md:max-w-5xl lg:max-w-6xl mx-auto py-6 relative z-10 mt-2 px-4 md:px-6 lg:px-8">
        {/* Hero Section with Overview - Improved layout */}
        <motion.section
          id="overview"
          ref={overviewInViewRef}
          animate={overviewControls}
          initial="hidden"
          variants={staggerContainerVariants}
          className="mb-12 md:grid md:grid-cols-12 md:gap-8"
        >
          {/* Hero Card with Featured Image - Fixed sizing */}
          <motion.div 
            variants={fadeInUpVariants}
            className="relative overflow-hidden rounded-2xl shadow-lg mb-8 md:col-span-8 md:mb-0"
          >
            {/* Featured Image with Overlay - Fixed aspect ratio */}
            <div className="relative overflow-hidden" style={{ aspectRatio: '16/9' }}>
              {region.media && region.media.length > 0 ? (
                <>
                  <div className="absolute inset-0 bg-gradient-to-b from-primary/60 to-primary-dark/90 mix-blend-multiply z-10"></div>
                  <motion.img 
                    src={region.media[0].url} 
                    alt={region.name} 
                    className="w-full h-full object-cover"
                    initial={{ scale: 1.1 }}
                    animate={{ scale: 1 }}
                    transition={{ duration: 1.2, ease: "easeOut" }}
                  />
                </>
              ) : (
                <div className="absolute inset-0 bg-gradient-to-b from-primary to-primary-dark"></div>
              )}
              
              {/* Content Overlay - Improved positioning */}
              <div className="absolute inset-0 z-20 flex flex-col justify-end p-6 text-white">
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.3, duration: 0.6 }}
                >
                  <div className="flex items-center mb-3">
                    <div className="bg-white/20 p-2.5 rounded-xl mr-4 backdrop-blur-sm">
                      <FaLocationDot className="text-2xl" />
                    </div>
                    <div>
                      <h1 className="text-3xl font-bold">{region.name}</h1>
                      {region.updated_at && (
                        <div className="text-sm opacity-90 mt-1 flex items-center">
                          <FaHistory className="h-3.5 w-3.5 mr-1.5" />
                          Updated {formatRelativeTime(region.updated_at)}
                        </div>
                      )}
                    </div>
                  </div>
                  
                  {/* Action Buttons */}
                  <div className="flex flex-wrap gap-2 mt-4">
                    <motion.button
                      onClick={handleCallClick}
                      className="bg-white text-primary px-4 py-2 rounded-xl flex items-center font-medium shadow-md"
                      whileHover={{ scale: 1.05, backgroundColor: "#f8f9fa" }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <FaPhone className="mr-2" />
                      Contact
                    </motion.button>
                    
                    <motion.button
                      onClick={handleShareClick}
                      className="bg-white/20 backdrop-blur-sm text-white px-4 py-2 rounded-xl flex items-center font-medium"
                      whileHover={{ scale: 1.05, backgroundColor: "rgba(255,255,255,0.3)" }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <FaShare className="mr-2" />
                      Share
                    </motion.button>
                  </div>
                </motion.div>
              </div>
            </div>
          </motion.div>
          
          {/* Description Card - Improved layout */}
          <motion.div 
            variants={fadeInUpVariants}
            className="bg-white rounded-2xl shadow-md p-6 md:col-span-4"
          >
            <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
              <div className="bg-primary/10 p-2 rounded-lg mr-3">
                <FaInfoCircle className="text-primary" />
              </div>
              About {region.name}
            </h2>
            
            <div className="prose prose-sm max-w-none text-gray-600">
              <div className={`${showFullDescription ? '' : 'line-clamp-4 md:line-clamp-6'}`}>
                {region.description || 'No description available for this region.'}
              </div>
              
              {region.description && region.description.length > 200 && (
                <button 
                  onClick={toggleDescription}
                  className="text-primary font-medium mt-2 flex items-center"
                >
                  {showFullDescription ? 'Show Less' : 'Read More'}
                  <svg 
                    xmlns="http://www.w3.org/2000/svg" 
                    className={`h-4 w-4 ml-1 transition-transform duration-300 ${showFullDescription ? 'rotate-180' : ''}`} 
                    fill="none" 
                    viewBox="0 0 24 24" 
                    stroke="currentColor"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
              )}
            </div>
          </motion.div>
        </motion.section>
        
        {/* Quick Stats Cards - Improved layout */}
        <motion.div 
          variants={staggerContainerVariants}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8"
        >
          {/* Price Card */}
          <motion.div 
            className="bg-white rounded-2xl shadow-md p-5 relative overflow-hidden md:col-span-1"
            whileHover={{ y: -5 }}
            transition={{ type: "spring", stiffness: 300, damping: 15 }}
          >
            <div className="absolute top-0 right-0 w-24 h-24 bg-green-50 rounded-full -mr-8 -mt-8 z-0"></div>
            <div className="relative z-10">
              <div className="flex items-center mb-3">
                <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center mr-3">
                  <FaFilter className="text-green-600 text-lg" />
                </div>
                <h3 className="text-lg font-bold text-gray-800">Best Price</h3>
              </div>
              <div className="flex items-baseline">
                <span className="text-3xl font-bold text-green-600">
                  {formatPrice(prices[currentPriceIndex]?.value || 0)}
                </span>
                <span className="text-sm text-gray-500 ml-2">/ton</span>
              </div>
              <p className="text-sm text-gray-500 mt-1">{prices[currentPriceIndex]?.label}</p>
            </div>
          </motion.div>
          
          {/* Average Weight Card */}
          <motion.div 
            className="bg-white rounded-2xl shadow-md p-5 relative overflow-hidden md:col-span-1"
            whileHover={{ y: -5 }}
            transition={{ type: "spring", stiffness: 300, damping: 15 }}
          >
            <div className="absolute top-0 right-0 w-24 h-24 bg-blue-50 rounded-full -mr-8 -mt-8 z-0"></div>
            <div className="relative z-10">
              <div className="flex items-center mb-3">
                <div className="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                  <FaWeightScale className="text-blue-600 text-lg" />
                </div>
                <h3 className="text-lg font-bold text-gray-800">Avg Weight</h3>
              </div>
              <div className="flex items-baseline">
                <span className="text-3xl font-bold text-blue-600">
                  {weights[currentWeightIndex]?.value}
                </span>
                <span className="text-sm text-gray-500 ml-2">kg/pc</span>
              </div>
              <p className="text-sm text-gray-500 mt-1">{weights[currentWeightIndex]?.label}</p>
            </div>
          </motion.div>
        </motion.div>
      </div>
      
      {/* Gallery Section */}
      {region.media && region.media.length > 0 && (
        <motion.section 
          id="gallery"
          ref={galleryInViewRef}
          animate={galleryControls}
          initial="hidden"
          variants={staggerContainerVariants}
          className="mb-12"
        >
          <motion.div variants={fadeInUpVariants} className="flex items-center justify-between mb-5">
            <h2 className="text-2xl font-bold flex items-center">
              <div className="bg-gradient-to-br from-primary-500/20 to-primary-600/10 p-3 rounded-xl mr-3 shadow-md">
                <FaImage className="text-primary text-xl" />
              </div>
              <span className="text-gray-800">Gallery</span>
            </h2>
          </motion.div>

          <motion.div variants={containerVariants} className="space-y-4 md:space-y-6">
            {/* Main Image Container */}
            <motion.div 
              variants={fadeInUpVariants}
              className="relative aspect-video w-full rounded-2xl overflow-hidden shadow-lg cursor-pointer md:h-[600px]"
              onClick={() => setShowImageModal(true)}
              whileHover={{ scale: 1.01 }}
              transition={{ type: "spring", stiffness: 300, damping: 15 }}
            >
              {/* Image Overlay Gradient */}
              <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent z-10 pointer-events-none"></div>
              
              {/* Main Image with Animation */}
              <AnimatePresence mode="wait">
                <motion.img 
                  key={selectedImageIndex}
                  src={region.media[selectedImageIndex].url} 
                  alt={`${region.name} - Image ${selectedImageIndex + 1}`}
                  className="w-full h-full object-cover"
                  initial={{ opacity: 0, scale: 1.05 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 1.05 }}
                  transition={{ duration: 0.4 }}
                  loading={selectedImageIndex === 0 ? "eager" : "lazy"}
                  decoding="async"
                />
              </AnimatePresence>
              
              {/* Fullscreen Indicator */}
              <motion.button
                className="absolute top-4 right-4 bg-white/20 backdrop-blur-md p-2.5 rounded-lg z-20 text-white shadow-md"
                onClick={(e) => { e.stopPropagation(); setShowImageModal(true); }}
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                <FaEye className="text-lg" />
              </motion.button>
              
              {/* Image Navigation Controls */}
              {region.media.length > 1 && (
                <div className="absolute bottom-4 left-4 right-4 flex justify-between items-center z-20">
                  <motion.button
                    className="bg-black/30 backdrop-blur-sm text-white p-2 rounded-full"
                    onClick={(e) => { e.stopPropagation(); prevImage(e); }}
                    whileHover={{ scale: 1.1, backgroundColor: "rgba(0,0,0,0.5)" }}
                    whileTap={{ scale: 0.9 }}
                  >
                    <FaChevronLeft />
                  </motion.button>
                  
                  <motion.button
                    className="bg-black/30 backdrop-blur-sm text-white p-2 rounded-full"
                    onClick={(e) => { e.stopPropagation(); nextImage(e); }}
                    whileHover={{ scale: 1.1, backgroundColor: "rgba(0,0,0,0.5)" }}
                    whileTap={{ scale: 0.9 }}
                  >
                    <FaChevronRight />
                  </motion.button>
                </div>
              )}
              
              {/* Image Counter */}
              <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/30 backdrop-blur-sm text-white px-3 py-1 rounded-full z-20 text-sm">
                {selectedImageIndex + 1} / {region.media.length}
              </div>
            </motion.div>

            {/* Thumbnail Grid */}
            <motion.div 
              variants={staggerContainerVariants}
              className="grid grid-cols-4 sm:grid-cols-5 md:grid-cols-8 lg:grid-cols-10 gap-2 md:gap-4"
            >
              {region.media.map((media, index) => (
                <motion.div 
                  key={media.id}
                  variants={scaleInVariants}
                  className={`aspect-square rounded-lg overflow-hidden cursor-pointer relative shadow-sm hover:shadow-md transition-all duration-300 ${
                    selectedImageIndex === index ? 'ring-2 ring-primary ring-offset-2' : ''
                  }`}
                  onClick={() => setSelectedImageIndex(index)}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <img 
                    src={media.url} 
                    alt={`${region.name} thumbnail ${index + 1}`} 
                    className="w-full h-full object-cover"
                    loading="lazy"
                  />
                  {selectedImageIndex === index && (
                    <div className="absolute inset-0 bg-primary/20 flex items-center justify-center">
                      <div className="bg-white rounded-full p-1">
                        <FaImage className="text-primary text-xs" />
                      </div>
                    </div>
                  )}
                </motion.div>
              ))}
            </motion.div>
          </motion.div>
        </motion.section>
      )}
      
      {/* Prices Section */}
      <motion.section
        id="prices"
        ref={priceInViewRef}
        animate={priceControls}
        initial="hidden"
        variants={staggerContainerVariants}
        className="mb-12"
      >
        <motion.div variants={fadeInUpVariants} className="flex items-center justify-between mb-5">
          <h2 className="text-2xl font-bold flex items-center">
            <div className="bg-gradient-to-br from-primary-500/20 to-primary-600/10 p-3 rounded-xl mr-3 shadow-md">
              <FaFilter className="text-primary text-xl" />
            </div>
            <span className="text-gray-800">Price Information</span>
          </h2>
        </motion.div>
        
        {/* Prices Cards */}
        <motion.div 
          variants={staggerContainerVariants}
          className="space-y-4"
        >
          {prices.map(({ label, value }, index) => (
            <motion.div
              key={label}
              variants={fadeInUpVariants}
              custom={index}
              whileHover={{ y: -4, boxShadow: "0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)" }}
              className="bg-white rounded-2xl shadow-md overflow-hidden"
            >
              <div className="flex items-center justify-between p-5">
                <div className="flex items-center">
                  <div className="h-12 w-12 rounded-xl bg-primary-50 flex items-center justify-center mr-4">
                    <FaFilter className="text-primary text-lg" />
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-gray-800">{label}</h3>
                    <p className="text-sm text-gray-500">Per piece pricing</p>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-2xl font-bold text-primary">{formatPrice(value)}</div>
                  <div className="text-xs text-gray-500 mt-1">
                    {index === currentPriceIndex && (
                      <motion.span
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        className="inline-flex items-center bg-green-50 text-green-700 px-2 py-1 rounded-full"
                      >
                        <span className="h-1.5 w-1.5 bg-green-500 rounded-full mr-1"></span>
                        Current Best
                      </motion.span>
                    )}
                  </div>
                </div>
              </div>
              
              {/* Progress Bar */}
              <div className="h-1.5 w-full bg-gray-100">
                <motion.div 
                  className="h-full bg-primary"
                  initial={{ width: 0 }}
                  animate={{ width: `${(parseFloat(value) / Math.max(...prices.map(p => parseFloat(p.value)))) * 100}%` }}
                  transition={{ duration: 1, delay: 0.2 + (index * 0.1) }}
                />
              </div>
            </motion.div>
          ))}
          
          {prices.length === 0 && (
            <motion.div
              variants={fadeInUpVariants}
              className="bg-gray-50 rounded-2xl p-8 text-center"
            >
              <div className="h-16 w-16 mx-auto mb-4 rounded-full bg-gray-100 flex items-center justify-center">
                <FaFilter className="text-gray-400 text-2xl" />
              </div>
              <h3 className="text-lg font-medium text-gray-700 mb-2">No Price Information</h3>
              <p className="text-gray-500">Price information for this region is not available at the moment.</p>
            </motion.div>
          )}
        </motion.div>
      </motion.section>
      
      {/* Metrics Section */}
      <motion.section
        id="metrics"
        ref={metricsInViewRef}
        animate={metricsControls}
        initial="hidden"
        variants={staggerContainerVariants}
        className="mb-12"
      >
        <motion.div variants={fadeInUpVariants} className="flex items-center justify-between mb-5">
          <h2 className="text-2xl font-bold flex items-center">
            <div className="bg-gradient-to-br from-primary-500/20 to-primary-600/10 p-3 rounded-xl mr-3 shadow-md">
              <FaChartLine className="text-primary text-xl" />
            </div>
            <span className="text-gray-800">Detailed Metrics</span>
          </h2>
        </motion.div>
        
        {/* Weights Cards */}
        <motion.div 
          variants={staggerContainerVariants}
          className="space-y-6"
        >
          <motion.div variants={fadeInUpVariants} className="bg-white rounded-2xl shadow-md p-6">
            <h3 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
              <FaWeightScale className="text-primary mr-2" />
              Weight Analysis
            </h3>
            
            {weights.length > 0 ? (
              <div className="space-y-4">
                {weights.map(({ label, value }, index) => (
                  <div key={label} className="space-y-2">
                    <div className="flex justify-between items-center">
                      <div className="flex items-center">
                        <div className="h-8 w-8 rounded-full bg-blue-50 flex items-center justify-center mr-2">
                          <FaWeightScale className="text-blue-500 text-xs" />
                        </div>
                        <span className="font-medium text-gray-700">{label}</span>
                      </div>
                      <div className="flex items-baseline">
                        <span className="text-xl font-bold text-blue-600">{value}</span>
                        <span className="text-sm text-gray-500 ml-1">kg/pc</span>
                      </div>
                    </div>
                    
                    {/* Progress Bar */}
                    <div className="h-2.5 bg-blue-50 rounded-full overflow-hidden">
                      <motion.div 
                        className="h-full bg-gradient-to-r from-blue-400 to-blue-500"
                        initial={{ width: 0 }}
                        animate={{ width: `${(value / Math.max(...weights.map(w => w.value))) * 100}%` }}
                        transition={{ duration: 1, delay: 0.5 + (index * 0.2) }}
                      />
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-6 bg-gray-50 rounded-xl">
                <p className="text-gray-500">No weight information available</p>
              </div>
            )}
          </motion.div>
          
          {/* Free Nuts Analysis */}
          <motion.div variants={fadeInUpVariants} className="bg-white rounded-2xl shadow-md p-6">
            <h3 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
              <FaPercent className="text-primary mr-2" />
              Free Nuts Analysis
            </h3>
            
            <div className="flex items-center justify-center mb-4">
              <div className="relative h-40 w-40">
                {/* Circular progress background */}
                <div className="absolute inset-0 rounded-full border-8 border-gray-100"></div>
                
                {/* Circular progress indicator */}
                <svg className="absolute inset-0" width="160" height="160" viewBox="0 0 160 160">
                  <circle
                    cx="80"
                    cy="80"
                    r="70"
                    fill="none"
                    stroke="#f0f0f0"
                    strokeWidth="12"
                  />
                  <motion.circle
                    cx="80"
                    cy="80"
                    r="70"
                    fill="none"
                    stroke="url(#gradient)"
                    strokeWidth="12"
                    strokeLinecap="round"
                    strokeDasharray="440"
                    initial={{ strokeDashoffset: 440 }}
                    animate={{ 
                      strokeDashoffset: 440 - (440 * (region.free_nut / 100)) 
                    }}
                    transition={{ duration: 1.5, delay: 0.5, ease: "easeOut" }}
                    transform="rotate(-90 80 80)"
                  />
                  <defs>
                    <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">
                      <stop offset="0%" stopColor="#fbbf24" />
                      <stop offset="100%" stopColor="#f59e0b" />
                    </linearGradient>
                  </defs>
                </svg>
                
                {/* Percentage display */}
                <div className="absolute inset-0 flex items-center justify-center flex-col">
                  <motion.span 
                    className="text-3xl font-bold text-yellow-600"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.8 }}
                  >
                    {region.free_nut}%
                  </motion.span>
                  <span className="text-sm text-gray-500">Free Nuts</span>
                </div>
              </div>
            </div>
            
            <div className="text-center">
              <p className="text-gray-600">
                This region has {region.free_nut}% free nuts, which is 
                {region.free_nut > 15 ? ' above ' : region.free_nut < 10 ? ' below ' : ' around '} 
                the average.
              </p>
            </div>
          </motion.div>
        </motion.div>
      </motion.section>
      
      {/* Call to Action */}
      <motion.div
        variants={fadeInUpVariants}
        className="bg-gradient-to-br from-primary to-primary-dark rounded-2xl shadow-lg p-6 text-white mb-12"
      >
        <div className="flex flex-col md:flex-row md:items-center justify-between">
          <div className="mb-4 md:mb-0">
            <h3 className="text-xl font-bold mb-2">Interested in {region.name}?</h3>
            <p className="opacity-90">Contact us now for more information and pricing details.</p>
          </div>
          <div className="flex space-x-3">
            <motion.button
              onClick={handleCallClick}
              className="bg-white text-primary px-5 py-3 rounded-xl font-medium flex items-center shadow-md"
              whileHover={{ scale: 1.05, y: -2 }}
              whileTap={{ scale: 0.98 }}
            >
              <FaPhone className="mr-2" />
              Call Now
            </motion.button>
            <motion.button
              onClick={handleShareClick}
              className="bg-white/20 backdrop-blur-sm text-white px-5 py-3 rounded-xl font-medium flex items-center"
              whileHover={{ scale: 1.05, y: -2 }}
              whileTap={{ scale: 0.98 }}
            >
              <FaShare className="mr-2" />
              Share
            </motion.button>
          </div>
        </div>
      </motion.div>
      
      {/* End of main content container */}
      </div>
      
      {/* Image Modal - Improved sizing and UI */}
      <AnimatePresence>
        {showImageModal && region.media && region.media.length > 0 && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="fixed inset-0 bg-black bg-opacity-95 z-50 flex items-center justify-center p-4 touch-manipulation"
            onClick={(e) => {
              // Close modal when clicking on the background (not on the content)
              if (e.target === e.currentTarget) {
                setShowImageModal(false);
              }
            }}
            {...swipeHandlers}
          >
            {/* Close Button */}
            <button 
              className="absolute top-4 right-4 z-50 bg-black/50 text-white p-2 rounded-full backdrop-blur-sm hover:bg-black/70 transition-colors"
              onClick={() => setShowImageModal(false)}
            >
              <FaXmark className="text-xl" />
            </button>
            
            {/* Navigation Arrows - Improved positioning and styling */}
            {region.media.length > 1 && (
              <>
                <button 
                  onClick={prevImage}
                  className="absolute left-4 top-1/2 -translate-y-1/2 z-50 h-12 w-12 rounded-full bg-black/50 text-white flex items-center justify-center backdrop-blur-sm hover:bg-black/70 transition-colors"
                >
                  <FaChevronLeft className="text-xl" />
                </button>
                <button 
                  onClick={nextImage}
                  className="absolute right-4 top-1/2 -translate-y-1/2 z-50 h-12 w-12 rounded-full bg-black/50 text-white flex items-center justify-center backdrop-blur-sm hover:bg-black/70 transition-colors"
                >
                  <FaChevronRight className="text-xl" />
                </button>
              </>
            )}
            
            {/* Image Counter */}
            <div className="absolute top-4 left-4 bg-black/50 text-white px-3 py-1.5 rounded-full z-50 backdrop-blur-sm">
              {selectedImageIndex + 1} / {region.media.length}
            </div>
            
            {/* Main Image Container - Fixed sizing */}
            <motion.div
              key={selectedImageIndex}
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              transition={{ duration: 0.3 }}
              className="relative w-full h-full flex items-center justify-center"
            >
              <img 
                src={region.media[selectedImageIndex].url} 
                alt={`${region.name} - Full size image ${selectedImageIndex + 1}`} 
                className="max-w-full max-h-[80vh] object-contain rounded-lg"
                style={{ maxWidth: '90vw' }}
              />
              
              {/* Image Info */}
              <div className="absolute bottom-0 left-0 right-0 bg-black/50 text-white p-4 backdrop-blur-sm rounded-b-lg">
                <p className="text-sm">{formatDate(region.media[selectedImageIndex].created_at)}</p>
                <div className="flex justify-between items-center mt-2">
                  <p className="text-xs opacity-75">Image {selectedImageIndex + 1} of {region.media.length}</p>
                  <a 
                    href={region.media[selectedImageIndex].url} 
                    download
                    target="_blank"
                    rel="noopener noreferrer"
                    className="bg-white/20 hover:bg-white/30 text-white px-3 py-1.5 rounded-lg text-sm flex items-center transition-colors duration-300"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <FaDownload className="mr-1.5" />
                    Download
                  </a>
                </div>
              </div>
            </motion.div>
            
            {/* Thumbnail Navigation - Improved styling */}
            {region.media.length > 1 && (
              <div className="absolute bottom-4 left-0 right-0 flex justify-center">
                <div className="flex space-x-2 px-2 py-1.5 bg-black/50 backdrop-blur-sm rounded-full">
                  {region.media.map((_, idx) => (
                    <button
                      key={idx}
                      className={`h-2 rounded-full transition-all duration-300 ${
                        idx === selectedImageIndex 
                          ? 'bg-white w-6' 
                          : 'bg-white/40 w-2 hover:bg-white/60'
                      }`}
                      onClick={() => setSelectedImageIndex(idx)}
                    />
                  ))}
                </div>
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>
      
      {/* Enhanced Call Modal */}
      <AnimatePresence>
        {isCallModalOpen && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4 backdrop-blur-sm"
            onClick={() => setIsCallModalOpen(false)}
          >
            <motion.div 
              initial={{ scale: 0.9, y: 20, opacity: 0 }}
              animate={{ scale: 1, y: 0, opacity: 1 }}
              exit={{ scale: 0.9, y: 20, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className="bg-white rounded-2xl p-6 max-w-sm w-full shadow-xl"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="text-center mb-6">
                <div className="h-20 w-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <FaPhone className="text-green-600 text-3xl" />
                </div>
                <h3 className="text-2xl font-bold text-gray-800">Contact {region.name}</h3>
                <p className="text-gray-600 mt-2">Connect with a representative for pricing and availability</p>
              </div>
              
              <div className="space-y-4">
                <a 
                  href="tel:+919876543210" 
                  className="flex items-center justify-center bg-green-600 hover:bg-green-700 text-white py-3.5 px-4 rounded-xl w-full font-medium transition-colors duration-300 shadow-md"
                >
                  <FaPhone className="mr-2" />
                  Call Now
                </a>
                <a 
                  href="https://wa.me/919876543210" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="flex items-center justify-center bg-green-100 hover:bg-green-200 text-green-800 py-3.5 px-4 rounded-xl w-full font-medium transition-colors duration-300"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.481 5.236 3.48 8.414-.003 6.557-5.338 11.892-11.893 11.892-1.99-.001-3.951-.5-5.688-1.448l-6.305 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.884-.001 2.225.651 3.891 1.746 5.634l-.999 3.648 3.742-.981zm11.387-5.464c-.074-.124-.272-.198-.57-.347-.297-.149-1.758-.868-2.031-.967-.272-.099-.47-.149-.669.149-.198.297-.768.967-.941 1.165-.173.198-.347.223-.644.074-.297-.149-1.255-.462-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.297-.347.446-.521.151-.172.2-.296.3-.495.099-.198.05-.372-.025-.521-.075-.148-.669-1.611-.916-2.206-.242-.579-.487-.501-.669-.51l-.57-.01c-.198 0-.52.074-.792.372s-1.04 1.016-1.04 2.479 1.065 2.876 1.213 3.074c.149.198 2.095 3.2 5.076 4.487.709.306 1.263.489 1.694.626.712.226 1.36.194 1.872.118.571-.085 1.758-.719 2.006-1.413.248-.695.248-1.29.173-1.414z"/>
                  </svg>
                  WhatsApp
                </a>
                <button 
                  onClick={() => setIsCallModalOpen(false)}
                  className="flex items-center justify-center bg-gray-100 hover:bg-gray-200 text-gray-800 py-3.5 px-4 rounded-xl w-full font-medium transition-colors duration-300"
                >
                  Cancel
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
      
      {/* Enhanced Share Modal */}
      <AnimatePresence>
        {isShareModalOpen && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4 backdrop-blur-sm"
            onClick={() => setIsShareModalOpen(false)}
          >
            <motion.div 
              initial={{ scale: 0.9, y: 20, opacity: 0 }}
              animate={{ scale: 1, y: 0, opacity: 1 }}
              exit={{ scale: 0.9, y: 20, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className="bg-white rounded-2xl p-6 max-w-sm w-full shadow-xl"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="text-center mb-6">
                <div className="h-20 w-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <FaShare className="text-blue-600 text-3xl" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">Share {region.name}</h3>
                <p className="text-gray-600 mt-2">Share this region with others</p>
              </div>
              
              <div className="mb-6">
                <div className="flex items-center bg-gray-100 rounded-lg p-3 mb-2">
                  <input 
                    type="text" 
                    value={window.location.href} 
                    readOnly 
                    className="bg-transparent flex-grow text-sm px-2 py-1 focus:outline-none"
                  />
                  <motion.button 
                    onClick={copyToClipboard}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded-lg text-sm flex items-center transition-colors duration-300 ml-2"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    {copied ? 'Copied!' : 'Copy'}
                  </motion.button>
                </div>
              </div>
              
              <div className="grid grid-cols-4 gap-3 mb-6">
                <motion.a 
                  href={`https://wa.me/?text=${encodeURIComponent(`Check out ${region.name} on OneRoot: ${window.location.href}`)}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex flex-col items-center justify-center p-3 rounded-xl bg-green-100 hover:bg-green-200 transition-colors duration-300"
                  whileHover={{ scale: 1.05, y: -3 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-green-700 mb-1" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.481 5.236 3.48 8.414-.003 6.557-5.338 11.892-11.893 11.892-1.99-.001-3.951-.5-5.688-1.448l-6.305 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.884-.001 2.225.651 3.891 1.746 5.634l-.999 3.648 3.742-.981zm11.387-5.464c-.074-.124-.272-.198-.57-.347-.297-.149-1.758-.868-2.031-.967-.272-.099-.47-.149-.669.149-.198.297-.768.967-.941 1.165-.173.198-.347.223-.644.074-.297-.149-1.255-.462-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.297-.347.446-.521.151-.172.2-.296.3-.495.099-.198.05-.372-.025-.521-.075-.148-.669-1.611-.916-2.206-.242-.579-.487-.501-.669-.51l-.57-.01c-.198 0-.52.074-.792.372s-1.04 1.016-1.04 2.479 1.065 2.876 1.213 3.074c.149.198 2.095 3.2 5.076 4.487.709.306 1.263.489 1.694.626.712.226 1.36.194 1.872.118.571-.085 1.758-.719 2.006-1.413.248-.695.248-1.29.173-1.414z"/>
                  </svg>
                  <span className="text-xs">WhatsApp</span>
                </motion.a>
                
                <motion.a 
                  href={`https://telegram.me/share/url?url=${encodeURIComponent(window.location.href)}&text=${encodeURIComponent(`Check out ${region.name} on OneRoot`)}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex flex-col items-center justify-center p-3 rounded-xl bg-blue-100 hover:bg-blue-200 transition-colors duration-300"
                  whileHover={{ scale: 1.05, y: -3 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-600 mb-1" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 0c-6.626 0-12 5.372-12 12 0 6.627 5.374 12 12 12 6.627 0 12-5.373 12-12 0-6.628-5.373-12-12-12zm3.224 17.871c.188.133.43.166.619.098.12-.044.232-.114.323-.201.403-.387.396-1.016-.017-1.397-1.032-.951-2.073-1.89-3.105-2.842-1.149-1.059-2.295-2.12-3.449-3.173-.14-.128-.308-.29-.266-.49.035-.16.2-.22.341-.275.883-.344 1.77-.678 2.652-1.023.732-.282 1.464-.56 2.194-.846.156-.061.33-.196.313-.38-.023-.226-.241-.283-.424-.342-1.064-.34-2.132-.671-3.197-1.01-1.261-.4-2.52-.807-3.783-1.2-.151-.047-.318-.084-.437.045-.119.13-.081.301-.04.447.145.518.294 1.035.445 1.551.274.93.556 1.859.797 2.801.26 1.01.504 2.025.737 3.042.076.333.17.663.233.998.038.208.203.412.43.442.198.026.35-.113.429-.273.61-1.228 1.235-2.451 1.855-3.676.388-.767.777-1.534 1.163-2.302.07-.14.143-.28.225-.411.103-.165.276-.278.468-.284.188-.005.387.113.52.254.16.168.275.376.421.558.528.656 1.059 1.31 1.59 1.963.733.9 1.468 1.797 2.205 2.694.168.204.345.398.485.622z"/>
                  </svg>
                  <span className="text-xs">Telegram</span>
                </motion.a>
                
                <motion.a 
                  href={`mailto:?subject=${encodeURIComponent(`Region: ${region.name}`)}&body=${encodeURIComponent(`Check out this region: ${region.name} ${window.location.href}`)}`}
                  className="flex flex-col items-center justify-center p-3 rounded-xl bg-red-100 hover:bg-red-200 transition-colors duration-300"
                  whileHover={{ scale: 1.05, y: -3 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-red-600 mb-1" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 12.713l-11.985-9.713h23.97l-11.985 9.713zm0 2.574l-12-9.725v15.438h24v-15.438l-12 9.725z"/>
                  </svg>
                  <span className="text-xs">Email</span>
                </motion.a>
                
                <motion.button
                  onClick={copyToClipboard}
                  className="flex flex-col items-center justify-center p-3 rounded-xl bg-gray-100 hover:bg-gray-200 transition-colors duration-300"
                  whileHover={{ scale: 1.05, y: -3 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-700 mb-1" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
                  </svg>
                  <span className="text-xs">{copied ? 'Copied!' : 'Copy'}</span>
                </motion.button>
              </div>
              
              <motion.button
                onClick={() => setIsShareModalOpen(false)}
                className="w-full py-3 bg-gray-100 hover:bg-gray-200 rounded-xl font-medium transition-colors duration-300"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                Close
              </motion.button>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
}

export default RegionDetailPage;